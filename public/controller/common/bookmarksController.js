// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['../../controller/controller', 'text!../../../layouts/bookmarks.html', 'text!../../../templates/simpleItemEntity.html', '../../models/entity', '../../collections/bookmarks'], function(Controller, layout, itemEntity, Entity, Bookmarks) {
    var BookmarksController, _ref;
    return BookmarksController = (function(_super) {
      __extends(BookmarksController, _super);

      function BookmarksController() {
        _ref = BookmarksController.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      BookmarksController.prototype.layout = _.template(layout);

      BookmarksController.prototype.itemEntity = _.template(itemEntity);

      BookmarksController.prototype.id = 'bookmarksView';

      BookmarksController.prototype.className = 'container';

      BookmarksController.prototype.events = {
        'click .delete-entity-from-stack': 'deleteFromStack',
        'click #delete-bookmarks': 'deleteAllBookmarks'
      };

      BookmarksController.prototype.initialize = function(params) {
        this.user = params.user;
        this.bookmarks = this.user.bookmarks;
        $(this.el).html(this.layout);
        return this.render();
      };

      BookmarksController.prototype.render = function() {
        this.bookmarks.each(this.createEntity, this);
        $(this.el).find('table').empty();
        return this.el;
      };

      BookmarksController.prototype.createEntity = function(entity) {
        entity = new Entity({
          id: entity.id
        });
        entity.bind('change', this.renderEntity, this);
        return entity.fetch();
      };

      BookmarksController.prototype.renderEntity = function(entity) {
        return $(this.el).find('table').append(this.itemEntity(entity.toJSON()));
      };

      BookmarksController.prototype.deleteFromStack = function(event) {
        this.bookmarks.deleteBookmark(event.currentTarget.id);
        return this.render();
      };

      BookmarksController.prototype.deleteAllBookmarks = function() {
        this.bookmarks.resetAll();
        return this.render();
      };

      BookmarksController.prototype.release = function() {
        this.undelegateEvents();
        return this.remove();
      };

      return BookmarksController;

    })(Controller);
  });

}).call(this);
