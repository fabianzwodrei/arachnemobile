// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['../../controller/controller', 'text!../../../layouts/course.html', 'text!../../../templates/simpleItemEntity.html', '../../models/entity'], function(Controller, layout, templateEntity, Entity) {
    var CourseController, _ref;
    return CourseController = (function(_super) {
      __extends(CourseController, _super);

      function CourseController() {
        _ref = CourseController.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      CourseController.prototype.layout = _.template(layout);

      CourseController.prototype.templateEntity = _.template(templateEntity);

      CourseController.prototype.next = true;

      CourseController.prototype.id = 'courseView';

      CourseController.prototype.className = 'container';

      CourseController.prototype.items = [];

      CourseController.prototype.events = {
        'click #paging-btn-next': 'showNext',
        'click #paging-btn-previous': 'showPrevious',
        'click #delete-course': 'deleteCourse',
        'click .delete-entity-from-stack': 'deleteEntity'
      };

      CourseController.prototype.initialize = function(params) {
        this.course = params.course;
        this.course.offset = 0;
        this.entities = this.course.next();
        $(this.el).html(this.layout);
        return this.render();
      };

      CourseController.prototype.render = function() {
        var courseEntity, entity, _i, _len, _ref1;
        $(this.el).find('table').empty();
        _ref1 = this.entities;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          entity = _ref1[_i];
          if (entity.indexOf('#entity') === 0) {
            courseEntity = new Entity({
              id: entity.replace(/#entity\//, "")
            });
            courseEntity.bind('change', this.renderEntity, this);
            courseEntity.fetch();
          } else if (entity.indexOf('#search') === 0) {
            this.renderEntity(entity);
          }
        }
        this.pagingButtons();
        this.pagingStats();
        return this.el;
      };

      CourseController.prototype.renderEntity = function(entity) {
        if (typeof entity === 'object') {
          if (entity.get('title') === '') {
            entity.attributes.title = "ID-" + entity.id;
          }
          entity.attributes.title = entity.get('title') + " (Kategorie: " + entity.get('type')[0].toUpperCase() + entity.get('type').slice(1) + ")";
          return $(this.el).find('table').append(this.templateEntity(entity.toJSON()));
        }
      };

      CourseController.prototype.pagingButtons = function() {
        $('#paging-btn-previous').attr({
          'disabled': 'disabled'
        }).attr({
          'onclick': 'return false;'
        });
        $('#paging-btn-next').attr({
          'disabled': 'disabled'
        }).attr({
          'onclick': 'return false;'
        });
        if (this.course.hasPrev() === true) {
          $(this.el).find('#paging-btn-previous').removeAttr("disabled");
        }
        if (this.course.hasNext() === true) {
          return $(this.el).find('#paging-btn-next').removeAttr("disabled");
        }
      };

      CourseController.prototype.pagingStats = function() {
        $(this.el).find('#pageNumber').html(this.course.pageNumber());
        return $(this.el).find('#pageCount').html(this.course.pageCount());
      };

      CourseController.prototype.showNext = function(event) {
        this.next = true;
        this.entities = this.course.next();
        return this.render();
      };

      CourseController.prototype.showPrevious = function(event) {
        this.next = false;
        this.entities = this.course.prev();
        return this.render();
      };

      CourseController.prototype.deleteEntity = function(event) {
        this.course.removeItem(event.currentTarget.id);
        this.entities = this.course.current();
        return this.render();
      };

      CourseController.prototype.deleteCourse = function() {
        this.course["delete"]();
        return this.render();
      };

      CourseController.prototype.release = function() {
        this.undelegateEvents();
        return this.remove();
      };

      return CourseController;

    })(Controller);
  });

}).call(this);
