// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone'], function(Backbone) {
    var Building, _ref;
    return Building = (function(_super) {
      var localVersionAvailable;

      __extends(Building, _super);

      function Building() {
        _ref = Building.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Building.prototype.urlRoot = "api/buildings";

      Building.prototype.idAttribute = "_id";

      localVersionAvailable = false;

      Building.prototype.attributes = {
        status: 'unknown'
      };

      Building.prototype.parse = function(response) {
        if (response._revs_info) {
          this.revisionsList = response._revs_info;
          delete response._revs_info;
        }
        return response;
      };

      Building.prototype.save = function(attributes, options) {
        options = {};
        options.error = function(building, xhr, options) {
          console.log("error while saving");
          building.set({
            status: 'modified'
          });
          return localStorage.setItem(building.id, JSON.stringify(building.toJSON()));
        };
        options.success = function(building, xhr) {
          if ((localStorage.getItem(building.id)) != null) {
            return localStorage.removeItem(building.id);
          }
        };
        return Backbone.Model.prototype.save.call(this, attributes, options);
      };

      Building.prototype.destroy = function() {
        this.url = "api/buildings/" + this.id + "?rev=" + this.attributes._rev;
        return Backbone.Model.prototype.destroy.call(this);
      };

      return Building;

    })(Backbone.Model);
  });

}).call(this);
