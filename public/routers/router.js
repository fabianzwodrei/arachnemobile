// Generated by CoffeeScript 1.6.3
(function() {
  define(['backbone', '../controller/entity/buildingController', '../controller/common/sessionController'], function(backbone, BuildingController, SessionController) {
    return Backbone.Router.extend({
      controller: null,
      routes: {
        '': 'index',
        'buildings/:id': 'buildings',
        'buildings': 'buildings',
        'buildings/search/:q': 'search',
        'login': 'login'
      },
      initialize: function(params) {
        var appCache;
        this.buildings = params.buildings;
        this.appStatus = params.appStatus;
        this.user = params.user;
        this.appStatus.bind('change:online', this.reloadControllerForConnectivityChange, this);
        appCache = window.applicationCache;
        switch (appCache.status) {
          case appCache.UNCACHED:
            return console.log('App cache status: UNCACHED');
          case appCache.IDLE:
            return console.log('App cache status: IDLE');
          case appCache.CHECKING:
            return console.log('App cache status: CHECKING');
          case appCache.DOWNLOADING:
            return console.log('App cache status: DOWNLOADING');
          case appCache.UPDATEREADY:
            console.log('App cache status: UPDATEREADY');
            appCache.swapCache();
            return appCache.reload();
          case appCache.OBSOLETE:
            return console.log('App cache status: OBSOLETE');
          default:
            return console.log('App cache status: UKNOWN CACHE STATUS');
        }
      },
      reloadControllerForConnectivityChange: function() {
        if (this.controller.id === 'buildingController' && Backbone.history.fragment === "buildings") {
          return this.controller.list();
        }
      },
      search: function(q) {
        this.initBuildingController();
        return this.controller.search(q);
      },
      initBuildingController: function() {
        if (this.controller == null) {
          return this.controller = new BuildingController(this.buildings);
        } else if (this.controller.id !== "buildingController") {
          this.controller.release();
          return this.controller = new BuildingController(this.buildings);
        }
      },
      buildings: function(id) {
        if (id == null) {
          id = null;
        }
        this.initBuildingController();
        switch (id) {
          case "new":
            return this.controller.form();
          case null:
            return this.controller.list();
          default:
            this.buildings.setCurrentBuildingById(id);
            return this.controller.show();
        }
      },
      login: function() {
        if (this.controller == null) {
          return this.controller = new SessionController({
            user: this.user
          });
        } else if (this.controller.id !== 'sessionController') {
          this.controller.release();
          return this.controller = new SessionController({
            user: this.user
          });
        }
      }
    });
  });

}).call(this);
