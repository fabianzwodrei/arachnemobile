// Generated by CoffeeScript 1.6.3
(function() {
  var db, nano;

  nano = require('nano')('http://localhost:5984');

  db = nano.use('arachne');

  exports.list = function(req, response) {
    return db.view_with_list('entities', 'preview', 'index', function(error, body) {
      if (error == null) {
        return response.send(body);
      } else {
        return response.send(500, error);
      }
    });
  };

  exports.get = function(request, response) {
    var options;
    options = {
      revs_info: true
    };
    if (request.query.rev != null) {
      options.rev = request.query.rev;
    }
    return db.get(request.params.id, options, function(error, body) {
      if (error == null) {
        return response.send(body);
      } else {
        return response.send(500, error);
      }
    });
  };

  exports.insert = function(request, response) {
    if (request.body._id != null) {
      if (request.body.status === 'modified') {
        request.body.status = 'serverVersion';
      }
      return db.insert(request.body, request.body._id, function(error, obj) {
        if (error == null) {
          return response.send(200, obj);
        } else {
          return response.send(500, error);
        }
      });
    } else {
      return db.insert(request.body, function(error, obj) {
        if (error == null) {
          return response.send(200, obj);
        } else {
          return response.send(500, error);
        }
      });
    }
  };

  exports["delete"] = function(request, response) {
    return db.destroy(request.params.id, request.query.rev, function(error, body) {
      if (error == null) {
        return response.send(200, body);
      } else {
        return response.send(500, body);
      }
    });
  };

  exports.getAttachment = function(request, response) {
    return db.attachment.get(request.params.id, request.params.filename, function(error, body) {
      if (error == null) {
        return response.send(200, body);
      }
    });
  };

}).call(this);
